# by https://pascalandy.com/ and https://firepress.org/
# GNU v3 | Please credit the author if you are re-using some of it
# The beauty of our CI setup is that it will build any Dockerfile
# by setting a variables directly in the Dockerfile.

name: build

on:
  push:
    branches:
      - 'master'
      - 'edge'
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
  schedule:
    - cron: '27 2 * * *'
            #at 02:27 everyday
defaults:
  run:
    shell: 'bash -Eeuo pipefail -x {0}'

jobs:

  pre_build:
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Set timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | GitHub Status
        uses: crazy-max/ghaction-github-status@v2
        with:
          overall_threshold: minor
          git_threshold: degraded_performance
          actions_threshold: operational
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      -
        name: Set variables | hardcoded
        # The way we define our variables is very explicit. It makes it easy to add/remove vars.
        # Hardcoded vars are: DOCKERFILE, THEME_NAME, REPO_TO_CLONE
        run: |
          mkdir -pv ~/varz
          echo "Dockerfile" > ~/varz/DOCKERFILE
      -
        name: Set variables | EDGE
        if: github.ref == 'refs/heads/edge'
        run: |
          echo "edge" > ~/varz/BRANCH_NAME
      -
        name: Set variables | MASTER
        if: github.ref == 'refs/heads/master'
        run: |
          echo "stable" > ~/varz/BRANCH_NAME
      -
        name: Save variables to disk
        run: |
          cat $(cat ~/varz/DOCKERFILE) | grep APP_NAME= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/APP_NAME
          cat $(cat ~/varz/DOCKERFILE) | grep DOCKERHUB_USER= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/DOCKERHUB_USER
          cat $(cat ~/varz/DOCKERFILE) | grep GITHUB_ORG= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/GITHUB_ORG
          cat $(cat ~/varz/DOCKERFILE) | grep GITHUB_REGISTRY= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/GITHUB_REGISTRY
          cat $(cat ~/varz/DOCKERFILE) | grep GIT_REPO_SOURCE= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/GIT_REPO_SOURCE
          echo "$(cat ~/varz/DOCKERHUB_USER)/$(cat ~/varz/APP_NAME)" > ~/varz/DKR_PREFIX
          echo "ghcr.io/$(cat ~/varz/GITHUB_ORG)/$(cat ~/varz/GITHUB_REGISTRY)/$(cat ~/varz/APP_NAME)" > ~/varz/GPR_PREFIX
          cat $(cat ~/varz/DOCKERFILE) | grep VERSION= | head -n 1 | grep -o '".*"' | sed 's/"//g' > ~/varz/VERSION
          git rev-parse --short HEAD > ~/varz/SHORT_HASH_COMMIT
          date "+%Y-%m-%d_%HH%Ms%S" > ~/varz/DATE
          echo "$(cat ~/varz/BRANCH_NAME)_$(cat ~/varz/VERSION)_ci_$(cat ~/varz/SHORT_HASH_COMMIT)" > ~/varz/VERSION_CI
          echo "$(cat ~/varz/BRANCH_NAME)_$(cat ~/varz/VERSION)" > ~/varz/VERSION_BRANCH
          echo "$(cat ~/varz/BRANCH_NAME)_$(cat ~/varz/VERSION)_$(cat ~/varz/SHORT_HASH_COMMIT)" > ~/varz/VERSION_HASH_ONLY
          echo "$(cat ~/varz/BRANCH_NAME)_$(cat ~/varz/VERSION)_$(cat ~/varz/SHORT_HASH_COMMIT)_$(cat ~/varz/DATE)" > ~/varz/VERSION_HASH_DATE
          echo "$(pwd)" > ~/varz/HOMMY

          echo "dope" > ~/varz/THEME_NAME
          echo "TryGhost/Dope" > ~/varz/REPO_TO_CLONE
          echo "$(cat ~/varz/THEME_NAME) $(cat ~/varz/BRANCH_NAME) $(cat ~/varz/VERSION) $(cat ~/varz/SHORT_HASH_COMMIT)" > ~/varz/_NOTI_MESSAGE
      - 
        name: Set ALL variables for this job | à la sauce GitHub Actions
        run: |
          echo "VERSION_HASH_DATE=$(cat ~/varz/VERSION_HASH_DATE)" >> $GITHUB_ENV
          echo "VERSION_HASH_ONLY=$(cat ~/varz/VERSION_HASH_ONLY)" >> $GITHUB_ENV
          echo "VERSION_CI=$(cat ~/varz/VERSION_CI)" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(cat ~/varz/VERSION_BRANCH)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(cat ~/varz/BRANCH_NAME)" >> $GITHUB_ENV
          echo "VERSION=$(cat ~/varz/VERSION)" >> $GITHUB_ENV
          echo "DKR_PREFIX=$(cat ~/varz/DKR_PREFIX)" >> $GITHUB_ENV
          echo "GPR_PREFIX=$(cat ~/varz/GPR_PREFIX)" >> $GITHUB_ENV
          echo "SHORT_HASH_COMMIT=$(cat ~/varz/SHORT_HASH_COMMIT)" >> $GITHUB_ENV
          echo "DATE=$(cat ~/varz/DATE)" >> $GITHUB_ENV
          echo "DOCKERFILE=$(cat ~/varz/DOCKERFILE)" >> $GITHUB_ENV
          echo "DOCKERHUB_USER=$(cat ~/varz/DOCKERHUB_USER)" >> $GITHUB_ENV
          echo "APP_NAME=$(cat ~/varz/APP_NAME)" >> $GITHUB_ENV
          echo "GITHUB_ORG=$(cat ~/varz/GITHUB_ORG)" >> $GITHUB_ENV
          echo "GITHUB_REGISTRY=$(cat ~/varz/GITHUB_REGISTRY)" >> $GITHUB_ENV
          echo "HOMMY=$(cat ~/varz/HOMMY)" >> $GITHUB_ENV
          echo "GIT_REPO_SOURCE=$(cat ~/varz/GIT_REPO_SOURCE)" >> $GITHUB_ENV
          echo "_NOTI_MESSAGE=$(cat ~/varz/_NOTI_MESSAGE)" >> $GITHUB_ENV
          echo "THEME_NAME=$(cat ~/varz/THEME_NAME)" >> $GITHUB_ENV
          echo "REPO_TO_CLONE=$(cat ~/varz/REPO_TO_CLONE)" >> $GITHUB_ENV
      -
        name: Show variables
        run: |
          echo "${{ env.VERSION_HASH_DATE }} < VERSION_HASH_DATE"
          echo "${{ env.VERSION_HASH_ONLY }} < VERSION_HASH_ONLY"
          echo "${{ env.VERSION_CI }} < VERSION_CI"
          echo "${{ env.VERSION_BRANCH }} < VERSION_BRANCH"
          echo "${{ env.BRANCH_NAME }} < BRANCH_NAME"
          echo "${{ env.VERSION }} < VERSION"
          echo "${{ env.DKR_PREFIX }} < DKR_PREFIX"
          echo "${{ env.GPR_PREFIX }} < GPR_PREFIX"
          echo "${{ env.SHORT_HASH_COMMIT }} < SHORT_HASH_COMMIT"
          echo "${{ env.DATE }} < DATE"
          echo "${{ env.DOCKERFILE }} < DOCKERFILE"
          echo "${{ env.DOCKERHUB_USER }} < DOCKERHUB_USER"
          echo "${{ env.APP_NAME }} < APP_NAME"
          echo "${{ env.GITHUB_ORG }} < GITHUB_ORG"
          echo "${{ env.GITHUB_REGISTRY }} < GITHUB_REGISTRY"
          echo "${{ env.HOMMY }} < HOMMY"
          echo "${{ env.GIT_REPO_SOURCE }} < GIT_REPO_SOURCE"
          echo "${{ env._NOTI_MESSAGE }} < _NOTI_MESSAGE"
          echo "${{ env.THEME_NAME }} < THEME_NAME"
          echo "${{ env.REPO_TO_CLONE }} < REPO_TO_CLONE"
      - 
        name: Upload variables as artifact
        uses: actions/upload-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz

  build:
    needs: [pre_build]
    runs-on: ubuntu-20.04
    steps:
      - name: Job preparation | Set timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Job preparation | Download variables from artifact
        uses: actions/download-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz
      - 
        name: Job preparation | Set variables for this job | à la sauce GitHub Actions
        run: |
          echo "VERSION_HASH_DATE=$(cat ~/varz/VERSION_HASH_DATE)" >> $GITHUB_ENV
          echo "VERSION_HASH_ONLY=$(cat ~/varz/VERSION_HASH_ONLY)" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(cat ~/varz/VERSION_BRANCH)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(cat ~/varz/BRANCH_NAME)" >> $GITHUB_ENV
          echo "VERSION_CI=$(cat ~/varz/VERSION_CI)" >> $GITHUB_ENV
          echo "DKR_PREFIX=$(cat ~/varz/DKR_PREFIX)" >> $GITHUB_ENV
          echo "GPR_PREFIX=$(cat ~/varz/GPR_PREFIX)" >> $GITHUB_ENV
          echo "DOCKERFILE=$(cat ~/varz/DOCKERFILE)" >> $GITHUB_ENV
          echo "DOCKERHUB_USER=$(cat ~/varz/DOCKERHUB_USER)" >> $GITHUB_ENV
          echo "GITHUB_ORG=$(cat ~/varz/GITHUB_ORG)" >> $GITHUB_ENV
          echo "GITHUB_REGISTRY=$(cat ~/varz/GITHUB_REGISTRY)" >> $GITHUB_ENV
          echo "HOMMY=$(cat ~/varz/HOMMY)" >> $GITHUB_ENV
          echo "GIT_REPO_SOURCE=$(cat ~/varz/GIT_REPO_SOURCE)" >> $GITHUB_ENV
          echo "APP_NAME=$(cat ~/varz/APP_NAME)" >> $GITHUB_ENV
          echo "THEME_NAME=$(cat ~/varz/THEME_NAME)" >> $GITHUB_ENV
          echo "REPO_TO_CLONE=$(cat ~/varz/REPO_TO_CLONE)" >> $GITHUB_ENV
          echo "_NOTI_MESSAGE=$(cat ~/varz/_NOTI_MESSAGE)" >> $GITHUB_ENV
      -
        name: Job preparation | Set NodeJS
        uses: actions/setup-node@v1
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        with:
          node-version: '14.x'
      -
        name: Build theme | ${{ env.THEME_NAME }}
        # It looks funny that we zip the theme to unzip it. The reason is that ghost developper optimize themes and zippin it is only one part of the equation.
        run: |
          git clone https://github.com/${{ env.REPO_TO_CLONE }}
          mv Dope ${{ env.THEME_NAME }}
          cd ${{ env.HOMMY }}/${{ env.THEME_NAME }}
          yarn && yarn zip
          unzip -o ${{ env.HOMMY }}/${{ env.THEME_NAME }}/dist/${{ env.THEME_NAME }}.zip -d ${{ env.HOMMY }}/${{ env.THEME_NAME }}/dist/${{ env.THEME_NAME }}
          cd ${{ env.HOMMY }}/${{ env.THEME_NAME }}/dist
      -
        name: Upload ${{ env.THEME_NAME }} to play-with-ghost.com
        if: ${{ success() }}
        #if: github.ref == 'refs/heads/master'
        uses: appleboy/scp-action@v0.1.1
        with:
          host: "${{ secrets.NODE1 }},${{ secrets.NODE2 }},${{ secrets.NODE3 }}"
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY_ACTIONS }}
          passphrase: ${{ secrets.SSH_KEY_ACTIONS_PASSPHRASE }}
          # It's important to cd at the right dir level in the step before
          source: ${{ env.THEME_NAME }}/*
          target: ${{ secrets.SSH_PWG_THEME_PATH_DOPE }}/content/themes
      -
        name: Upload ${{ env.THEME_NAME }} as artifact
        # The artifacts are zipped on request by Github Actions. No need to upload theme already zipped.
        if: ${{ success() }}
        uses: actions/upload-artifact@master
        with:
          name: dope
          path: ${{ env.HOMMY }}/${{ env.THEME_NAME }}/dist/${{ env.THEME_NAME }}/*

  post_build:
    needs: [build]
    runs-on: ubuntu-20.04
    steps:
      - 
        name: Job preparation | Setup timezone
        uses: zcong1993/setup-timezone@v1.1.1
        with:
          timezone: America/Montreal
      -
        name: Job preparation | Checkout
        uses: actions/checkout@v2
      - 
        name: Job preparation | Download variables from artifact
        uses: actions/download-artifact@master
        with:
          name: variables_on_disk
          path: ~/varz
      - 
        name: Job preparation | Set variables for this job | à la sauce GitHub Actions
        run: |
          echo "VERSION_HASH_DATE=$(cat ~/varz/VERSION_HASH_DATE)" >> $GITHUB_ENV
          echo "VERSION_HASH_ONLY=$(cat ~/varz/VERSION_HASH_ONLY)" >> $GITHUB_ENV
          echo "VERSION_BRANCH=$(cat ~/varz/VERSION_BRANCH)" >> $GITHUB_ENV
          echo "BRANCH_NAME=$(cat ~/varz/BRANCH_NAME)" >> $GITHUB_ENV
          echo "VERSION_CI=$(cat ~/varz/VERSION_CI)" >> $GITHUB_ENV
          echo "DKR_PREFIX=$(cat ~/varz/DKR_PREFIX)" >> $GITHUB_ENV
          echo "GPR_PREFIX=$(cat ~/varz/GPR_PREFIX)" >> $GITHUB_ENV
          echo "DOCKERFILE=$(cat ~/varz/DOCKERFILE)" >> $GITHUB_ENV
          echo "DOCKERHUB_USER=$(cat ~/varz/DOCKERHUB_USER)" >> $GITHUB_ENV
          echo "GITHUB_ORG=$(cat ~/varz/GITHUB_ORG)" >> $GITHUB_ENV
          echo "GITHUB_REGISTRY=$(cat ~/varz/GITHUB_REGISTRY)" >> $GITHUB_ENV
          echo "HOMMY=$(cat ~/varz/HOMMY)" >> $GITHUB_ENV
          echo "GIT_REPO_SOURCE=$(cat ~/varz/GIT_REPO_SOURCE)" >> $GITHUB_ENV
          echo "APP_NAME=$(cat ~/varz/APP_NAME)" >> $GITHUB_ENV
          echo "THEME_NAME=$(cat ~/varz/THEME_NAME)" >> $GITHUB_ENV
          echo "REPO_TO_CLONE=$(cat ~/varz/REPO_TO_CLONE)" >> $GITHUB_ENV
          echo "_NOTI_MESSAGE=$(cat ~/varz/_NOTI_MESSAGE)" >> $GITHUB_ENV
      -
        name: Notify slack
        #if: github.ref == 'refs/heads/master'
        run: |
          docker run --rm \
            --name noti \
            -e NOTI_MESSAGE='${{ env._NOTI_MESSAGE }}' \
            -e SLACK_CHANNEL="github-actions" \
            -e SLACK_TOKEN_CRON="${{ secrets.TOKEN_SLACK }}" \
            devmtl/noti:stable sh -c \
              ' NOTI_SLACK_TOKEN="$SLACK_TOKEN_CRON" \
                NOTI_SLACK_CHANNEL="$SLACK_CHANNEL" \
                noti -k -m "$NOTI_MESSAGE" '
